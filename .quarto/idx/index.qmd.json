{"title":"<p style=\"color:black,text-align:center\">Design of Experiment</p>","markdown":{"yaml":{"title":"<p style=\"color:black,text-align:center\">Design of Experiment</p>","author":[{"name":"<font color=#ff6600><b>Biometrics Unit</b></font>"}],"affiliation":"<font color=#ff6600><b>International Institute of Tropical Agriculture (IITA)</b></font>"},"headingText":"[**Introduction**]{style=\"color: #234F1E;\"}","containsRefs":false,"markdown":"\n\n\nExperimental design pertains to the way participants are assigned to various groups within an experiment. It is a thorough blueprint for gathering and utilizing data to uncover causal relationships. By meticulously strategizing, experimental design enables your data collection endeavors to effectively detect effects and assess hypotheses that address your research inquiries. Statistical design of experiments refers to the process of planning the experiment so that appropriate data will be collected and analyzed by statistical methods, resulting in valid and objective conclusions. Typically, the goal is to determine the impact that an independent variable has on a dependent variable. A well-designed experiment is important because the results and conclusions that can be drawn from the experiment depend to a largely on the way the data were collected. In experimental design it is important to **identify** the [**sources of variation.**]{style=\"color: #2C6D26;\"} The specific one chosen in an experimental design will be determined by the design's objective.\n\nA design is selected for an experiment based on the materials or treatments as well as the plots available for the experiment. Two main groups of designs are often used in breeding experiments. They are the complete block designs and the incomplete block designs.\n\nAll experiments have certain things in common, so designing an experiment usually includes the following steps. You must decide what question you want to have answered. This is the goal, or objective, of the experiment. The goal of the experiment will dictate what to include in the experiment to help you answer your question. The individual things that you wish to test in your experiment are called \"treatments\" and the physical areas to which the treatments are applied are called \"plots.\" Then you need to decide how the treatments should be physically arranged in the field. Technically, this is what is called the \"experimental design.\"\n\nThe objectives must be clearly stated as questions that need to be answered; hypotheses to be tested, and effects to be estimated. It is necessary to classify the objectives as major or minor since certain experimental designs give greater precision for some treatment comparisons than others.\n\n## [Principles of Experimental Design]{style=\"color: #002D62;\"}\n\nThere are three basic principles pf experimental design, these include:\n\n-   **Replication:** Two or more experiments using different experimental units, but with the same factor or independent variable settings. NB: *Due to changes in lurking variables and inherent variations in experimental units, the measured dependent variable may differ among replicate runs.* Replication entails duplicating experimental units or treatments to accommodate variability within the experiment. This practice enhances the accuracy of estimates and enables more robust statistical analysis. The number of replications is usually dependent on cost and time of experimentation. However, the smaller the size of difference expected to be detected, the higher the number of replicates required.\n\n    Replication is necessary because all test plots are not identical, and that leads to variation in the data you collect; you will not get the same results from two plots that received the same treatment.\n\n-   **Randomization:** Is the process of randomly assigning treatments to experimental units. As a result of the random process, every treatment factors has the same probability. By randomly assigning experimental units to treatments, randomization enhances the reliability of experimental outcomes by minimizing the influence of extraneous variables. Randomization is the allocation of treatments to units such that the probability that a particular treatment will be allocated to a particular unit is the same for all treatments. In plant breeding experiments, two commonly employed randomization methods include Latin Square Designs and Randomized Complete Block Designs (RCBD).\n\n-   **Blocking (error control):** Is the procedure for gathering similar experimental units into a relatively homogeneous group. Blocking consists of grouping experimental units into homogeneous blocks according to factors that could affect the response variable. This approach mitigates experimental error by addressing variability related to specific factors, such as soil type or field location. Often blocking is used to reduce or eliminate the variability transmitted from nuisance factors—that is, factors that may influence the experimental response but in which we are not directly interested. In field experiments where substantial variation within an experimental field can be expected, significant reduction in experimental error is usually achieved with the use of proper blocking.\n\nIn plant breeding, we do consider another vital principle of experimental design. This is the interaction effects.\n\n-   **Interaction Effects:** Interaction happens when the impact of one independent variable varies depending on the level of another independent variable. Put differently, the effect of one independent variable is not consistent across all levels of the other independent variable. In plant breeding, interaction effects refer to how the performance or expression of a particular trait (dependent variable) varies depending on the combination of different factors or conditions (independent variables). These factors can include genetic traits (genotypes), environmental conditions (such as temperature, soil type, or moisture), management practices (like fertilizer application or pest control), or their combinations.\n\n## [Applications of Experimental Design in Plant Breeding]{style=\"color: #002D62;\"}\n\n**Experimental design can be used in plant breeding such as:**\n\n-   **Genotype x Environment Interaction (G x E) studies:** Genotype by Environment (G × E) interaction is crucial in plant breeding, as the performance of a genotype can differ across various environmental conditions. DoE allows breeders to evaluate G × E interaction through multi-locational trials conducted under diverse agro-climatic conditions. This approach aids in identifying genotypes that exhibit broad and specific adaptation, enabling breeders to develop cultivars that are more stable and productive.\n\n-   **Optimization of Breeding:** Experimental design enables the refinement of breeding strategies by assessing the effectiveness of different selection methods, breeding techniques, and combinations of traits. Through systematic testing of various breeding approaches, breeders can pinpoint the most efficient strategies to achieve specific breeding goals, such as enhancing disease resistance, improving yield, or increasing nutritional quality.\n\n-   **Optimization of Field Management Practices:** Aside from genetic factors, crop performance is significantly impacted by environmental management practices such as irrigation, fertilization, and pest control. Experimental design enables breeders to enhance field management practices through controlled experiments that evaluate the effects of various agronomic techniques on crop yield, quality, and resource utilization efficiency.\n\n-   **Stress Tolerance Screening:** Given the escalating challenges presented by climate change and environmental pressures, there is an increasing demand to cultivate crop varieties that exhibit heightened stress tolerance. Experimental design supports stress tolerance screening by allowing breeders to methodically assess the performance of diverse germplasm under stressful conditions. By pinpointing genotypes with superior stress resilience and comprehending the underlying physiological mechanisms, breeders can cultivate resilient cultivars capable of thriving in challenging environments.\n\nThe application of experimental design in plant breeding can result in:\n\n-   Improved accuracy of decision making\n-   Reduced variability\n-   Reduced overall cost\n-   Compare resistant to drought\n\n## [Guidelines for Designing an Experiment]{style=\"color: #002D62;\"}\n\nThe following are the guidelines in designing of experiment\n\n-   Define Objectives - Hypothesis\n-   Identify Experimental Units\n-   Define Measurable Response – Dependent Variable\n-   List Factor/Independent & Lurking Variables\n-   Run Pilot Tests\n-   Make a Flow Diagram of Experimental Procedure\n-   Choose Experimental Design\n-   Determine the number of Replicates Required\n-   Randomize the Experimental Condition to Experimental Units\n-   Describe a Method for Data Analysis\n-   Timetable and Budget for Resources Needed to Complete the Experiments\n\n![](images/Steps in DoE.png){width=\"40%\"}\n\n## [Definition of Terms]{style=\"color: #002D62;\"}\n\n-   **Experiment (Run):** A procedure in which the researcher modifies ***at least*** one of the variables under investigation and then examines the results.\n\n-   **Experimental Unit (EU):** Item that is being studied and on which something is modified. **Experimental unit** is the smallest thing that is measured. It may be a plot, an animal, a tree, group of trees, a plant, a person, etc., receiving a treatment.\n\n-   **Sub-Sample/Sub-Unit/Observational Unit:** It is formed when the experimental unit is split after the action has been performed on it. NB: Sub-samples or *sub-units of the same experimental unit are usually correlated and should be averaged before analysis.*\n\n-   **Treatment Factor (Independent Variable):** Variable under investigation/control that is kept at near or perfect value, or level during experiment.\n\n-   **Background/Lurking Variable:** Variable the experimenter is unaware of or unable to control that could affect the outcome of the experiment.\n\n-   **Response (Dependent Variable):** The feature of the experimental unit that is measured after each experiment or runs. NB: *The size of the responses is influenced by the settings of the independent variables or factors, as well as any hidden variables.*\n\n-   **Experimental Error:** The variation between the observed response for a specific experiment and the long run average of all tests conducted with the same independent variables or factors. NB: *Because of background or lurking variables, experimental errors are not equal to zero.*\n\n-   **Effect:** The change in the response variable that is caused by change in the treatment factor or independent variable. NB: *It's termed **calculated effect** when it's computed after an experiment from observed data, while it's called **effect size** when it's determined before an experiment.*\n\n-   **Fixed Effect:** We have a fixed effect if the treatments are well defined and easily replicable and are expected to yield the same impact on average in each replicate. The model is called a ***fixed effect model.***\n\n-   **Random Effect:** We have a random effect if the treatments cannot be considered to come from a predefined or known set, they are supposed to be a **random sampling** from a larger population of possible treatments. The model is called a ***random effects model.***\n\n-   **Block Design:** In many experiments, the available experimental units are grouped into blocks with similar characteristics to mitigate the impact of potential sources of variability. This approach is known as block design.\n\n-   **Complete Block Design:** The number of experimental units in a block is called the block size. If size of block is the same as the number of treatments and each treatment in each block is randomly allocated, then it is a full replication, and the design is called a complete block design.\n\nThe choice of experimental design to study the source of variability depends on the number of sources under study. The appropriate experimental design to study cause and effect relationship depends on:\n\n-   Type & number of treatment factors\n-   Degree of homogeneity of experimental units\n-   Ease of randomization\n-   Ability to block experimental units into homogeneous groups\n\nThe final experimental design chosen will determine the following\n\n-   How data will be collected\n-   Model to be fit to analyze the data\n-   Data interpretation\n-   Conclusions drawn from experiment\n\n**Some standard designs that are frequently used are:**\n\n1.  Completely randomized design (CRD)\n2.  Randomized complete block design (RCBD)\n3.  Incomplete block design (IBD)\n4.  Lattice and Alpha design\n5.  Latin Square Design\n6.  Augmented design\n7.  Split plot design\n8.  Sparse Testing\n9.  P-rep Design\n\n# [**Standard Designs**]{style=\"color: #2C6D26;\"}\n\nHere, we shall identify some designs commonly used in field experiments. We shall outline the design features and the most auspicious situation or environment; we shall also specify the relevant statistical model because specification of the model is always an element of experiment design; there is always the need to construct the model and sketch the analysis of variance as part of the design of the experiment.\n\n# [**Completely Randomized Design**]{style=\"color: #2C6D26;\"}\n\nThis is the simplest of all experimental designs. A completely randomized design (CRD) refers to a design where the experimenter randomly assigns experimental units to treatments, so that each experimental unit has the same chance of receiving any one treatment. This design is employed in experiments that do not involve blocking factors with homogeneous experimental units.\n\nThe layout of a CRD is as shown below.\n\n![](images/crd.png){width=\"40%\"}\n\n## [Example]{style=\"color: #002D62;\"}\n\nThe basic R syntax for CRD is\n\n```{r}\n#design.crd(trt, r, serie = x, seed = yyy) #<<  \n```\n\n**Arguments**\n\n-   `trt` : Treatments\n-   `r` : Replications\n-   `serie` : number plot, 1: 11,12; 2: 101,102; 3: 1001,1002\n-   `seed` : seed\n\n**Lets see an example**\n\n```{r }\n\n#|message = FALSE\n#|eval=TRUE\n#Load libraries \nlibrary(tidyverse) \nlibrary(agricolae)  \n################Completely Randomized Design - CRD####################  \n#Planning CRD \ntrt <- c(\"G1\",\"G2\",\"G3\",\"G4\",\"G5\") \nplan <- design.crd(trt,3, seed=7638) \nplan <- plan$book \nView(plan)  \n# write out the plan \nwrite_csv(plan, file = \"CRDplan.csv\") \n```\n\n# [**Randomized Complete Block Design**]{style=\"color: #2C6D26;\"}\n\nRandomized complete block design (RCBD) is the most used of the experiment designs. The design is used when plots can be grouped into blocks such that units in each block are homogenous and the number of units in each block is the same as the number of treatments in the experiment. The design is especially suited for field experiments where the number of treatments is not large and there exists a conspicuous factor based on which homogeneous sets of experimental units can be identified. The primary distinguishing feature of the RCBD is the presence of blocks of equal size, each of which contains all the treatments. The blocks of the experimental units should be uniform as possible so that the observed differences between treatments will be largely due to `true` differences between treatments. A completely randomized block design will fully replicate all treatments in grouped homogeneous blocks. In field research, location is often a blocking factor. RCBD helps reduce variability caused by difference between blocks, allowing for more precise estimation of treatment effects.\n\nThe layout for RCBD is as shown below\n\n![](images/rcbd.png){width=\"50%\"}\n\n## [Example]{style=\"color: #002D62;\"}\n\nThe basic R syntax for RCBD is\n\n```{r}\n#design.rcbd(trt, r, serie = x, seed = yyy) #<<\n```\n\n**Arguments**\n\n-   `trt` : Treatments\n-   `r` : Replications or blocks\n-   `serie` : number plot, 1: 11,12; 2: 101,102; 3: 1001,1002\n-   `seed` : seed\n\n**Lets look at an example**\n\n```{r}\n##############Randomized Complete Block Design - RCBD######################  #Planning RCBD \ntrt1 <- c(\"A\",\"B\",\"C\",\"D\",\"E\") \nplan2 <- design.rcbd(trt1, 4, seed = 161)\nplan2 <- plan2$book \nView(plan2)   \n# write out the plan \nwrite_csv(plan2, file = \"RCBDplan.csv\")\n```\n\n# [**Incomplete Block Design**]{style=\"color: #2C6D26;\"}\n\nIn earlier designs, we assumed that each block contains all treatments. When the number of treatments is large, it may not be possible to get enough homogenous plots to contain all the treatments. Block designs which have blocks of size less than the number of treatments are called Incomplete Block Designs.\n\nIncomplete block designs (IBD) prove beneficial when time and/or space constraints prevent monitoring all treatments simultaneously. They enable experiments to be conducted in stages, facilitating more manageable implementation. Moreover,*incomplete block designs can effectively minimize experimental error, offering a higher level of precision in treatment comparisons compared to complete block designs*.\n\nThis occurs when the number of treatments is so large that a full replication in each block makes it too heterogeneous with respect to the characteristic under study, then smaller but homogeneous blocks can be used. In such a case, the blocks do not contain a full replicate of the treatments. Experimental designs with blocks containing an incomplete replication of the treatments is called incomplete block design.\n\nThe incomplete block design can be considered under two categories, a balance incomplete block design and an unbalanced incomplete block design. A balanced incomplete block design ensures that all treatments are compared with equal precision, as each pair of treatments occurs together an equal number of times. An unbalanced incomplete block design is suitable for experiments conducted in stages. It allows for a smaller-scale experiment, albeit with reduced precision, as not every treatment pair occurs equally. Increasing the number of repetitions in an unbalanced incomplete block design enhances precision. Despite replication, an unbalanced design typically results in a smaller experiment compared to a balanced design.\n\n**The layout for balanced and unbalanced incomplete block design is as shown below:**\n\nLet’s just consider **square lattices**, where the number of genotypes is a perfect square, for example 9, 16, 25, 144 or 900. In a square lattice, the block size is fixed as the square root of the number of genotypes. Example: with 225 genotypes the blocks would be of 15 plots each. Suppose that 9 genotypes are to be evaluated, each to be replicated twice. This permits us to use 2 replicates in a 3x3-lattice arrangement, prior to randomization. Once you lunch the **library(agricolae)**, the function **design.lattice** generate the lattice design and **design.alpha** to generate the alpha design.\n\n![](images/Lattice.png)\n\n**Lets see an example**\n\nAlpha and Lattice are two examples of incomplete block design. We will look at these two designs.\n\n## [Example of Square Lattice Design (SLD)]{style=\"color: #002D62;\"}\n\nThe basic R syntax for SLD is\n\n```{r}\n#design.lattice(trt2, r=x, seed = yyy)\n```\n\n**Arguments**\n\n-   `trt` : treatments\n-   `r` : r = 2(simple) or r = 3(triple) lattice\n-   `serie` : number plot, 1: 11,12; 2: 101,102; 3: 1001,1002\n-   `seed` : seed\n\n```{r}\n#Planning Row Column Design - SLD \ntrt2 <- 1:81 \nplan3 <- design.lattice(trt2, r=2, seed = 123) \nplan3 <- plan3$book \nView(plan3)   # write out the plan write_csv(plan3, file = \"SLDplan.csv\")\n```\n\n## [Example of Alpha design]{style=\"color: #002D62;\"}\n\nThe basic R syntax for Alpha Design is\n\n```{r}\n#design.alpha(trt,k,r,serie=2, seed=seed)\n```\n\n**Arguments**\n\n-   `trt` : treatments\n-   `k` : size block\n-   `r` : Replications\n-   `serie` : number plot, 1: 11,12; 2: 101,102; 3: 1001,1002\n-   `seed` : seed\n\n```{r}\n#Planning an Alpha design - AD \n#30 test materials \ntrt <- 1:30 #trt <- letters[1:12] \nt <- length(trt) \n# size block k \nk <- 3 \n# Blocks s \ns <- t/k \n# replications r \nr <- 2   \nplan4 <- design.alpha(trt,k,r,serie=2, seed=1234)  \nplan4 <- plan4$book  \nView(plan4)  \n# write out the plan\nwrite_csv(plan4, file = \"ADplan.csv\")\n```\n\n# [**Latin Square Design**]{style=\"color: #2C6D26;\"}\n\nThe Latin square design (LSD) is a type of complete block design utilized in experiments where two blocking criteria are relevant. The Latin square design is used where the researcher desires to control the variation in an experiment that is related to rows and columns in the field. This layout is particularly employed in field trials where environmental factors like irrigation and soil type vary across rows and columns. Each treatment is randomly assigned exactly once per row and per column, treating each row and column as complete blocks. It is a n x n grid filled by n distinct numbers each appearing exactly once in each row and column.\n\nThis design is used to control two sources of variation (other than treatments) generally referred to as “rows” and “columns”. IT is an arrangement of symbols in a square array such that every symbol occurs exactly one in each row and once in each column. It is a form of block where the two blocks are perpendicular to each other. In Latin square design, the number of plots (n) is the square of the number of treatments (t), i.e. n=$t^2$ – Number of times each treatment occurs is also t.\n\nThis design is used to simultaneously control (or eliminate) two sources of nuisance variability. Often, the nuisance factors controlled in a Latin-Square are known as row and column factor for obvious reasons. The levels of the treatment factor are represented by Latin letters and arranged orthogonally in the cells of the square.\n\nThe layout for Latin square design is as shown below\n\n![](images/latinsquare.png)\n\n## [Example]{style=\"color: #002D62;\"}\n\nThe basic R syntax for LSD is\n\n```{r}\n#LSD.test(y, trt, DFerror, MSerror, alpha, group)\n```\n\n**Arguments**\n\n-   `trt`: treatments\n-   `serie` : number plot, 1: 11,12; 2: 101,102; 3: 1001,1002\n-   `seed` : seed\n\n# [**Augmented Design**]{style=\"color: #2C6D26;\"}\n\nThe augmented experimental designs are used for two types of treatments: the control treatments (common) and the increased treatments. The common treatments are applied in complete randomized blocks, and the increased treatments, at random. Each treatment should be applied to any block once. This design proves valuable when handling a substantial number of treatments where replication is impractical or infeasible. Typically, studies employing this approach aim to rank or select genotypes as their primary objective.\n\nSuppose a researcher intends to evaluate 10 different types of fertilizers. Key considerations such as determining optimal plot locations, deciding on the number of replications for each fertilizer type, and assigning specific fertilizers to respective plots all hold significant importance in planning the experiment.\n\nAugmented designs are appropriate for early generation stages when hundreds or even thousands of genotypes are being evaluated in the same experiment, using a limited amount of sowing material, perhaps enough for one replicate only. Where there is little seed for some of the genotypes, there may be just a single replicate of some of these genotypes.\n\nAn augmented design is any standard design in control treatments augmented with additional (new or test) treatments in complete or incomplete blocks in one-way heterogeneity setting. A survey of the literature reveals that generally these experiments are conducted using an augmented randomized complete block design. In an **augmented RCB design**, the basic design plan is to divide the experimental area into several blocks. A few check varieties are replicated in each block, while test genotypes are assigned to the remaining plots in each block. The test genotypes are not replicated but are assigned at random throughout the blocks\n\nExample: For 45 unreplicated lines, with 3 checks and 9 blocks. The number of plots will be: (45+3\\*9) = 72 plots\n\n**With augmented design one can estimate the following:**\n\na)  Differences between checks and new treatments,\nb)  Differences among new treatments,\nc)  Differences among check treatments, and\nd)  Differences among new and check treatments combined.\n\nThe layout for augmented design is as shown below\n\n![](images/augmented1.png){width=\"40%\"}\n\nSimplest case is the Augmented Randomized Complete Block Design (ARCB), with\n\n-   Checks occurring once in every block\n\n-   New or test treatment occurs once in the treatment\n\n    Plant breeding used cases includes when there is:\n\n    -   Limited seeds – test treatments\n\n    -   Land & other resources are limited\n\n    -   It’s difficult to keep homogeneous blocks in many genotypes.\n\n    -   Test promising genotypes in as many environments as possible\n\n-   Few drawbacks\n\n    -   Significant resources are spent on producing & processing of control plots\n\n    -   Experimental error has a limited number of degrees of freedom, which limits the power to detect changes across treatments.\n\n    -   Unreplicated experiments are inherently imprecise, regardless of the design\n\nThe function **design.dau** generates the augmented design.\n\n## [Example]{style=\"color: #002D62;\"}\n\nThe basic R syntax to achieve this is:\n\n```{r}\n# design.dau(trt1, trt2, r, serie = 2, seed = 0, kinds = \"Super-Duper\", name=\"trt\",randomization=TRUE)\n```\n\n**Arguments**\n\n-   `trt1`: check\n-   `trt2`: treatment\n-   `r`: Replications or blocks\n-   `serie`: number plot, 1: 11,12; 2: 101,102; 3: 1001,1002\n-   `seed`: seed\n\n**Lets look at an example**\n\n```{r} #################Augmented Block Design - ABD#######################}\n#Planning ABD \ncheck <- c(\"A\",\"B\",\"C\",\"D\")  #Checks\nnew <- letters[20:26]   #New treatments\n# 5 Replication or blocks \nplan5 <-design.dau(check, new, r=5, serie=2, seed = 1611)\nplan5 <- plan5$book\nView(plan5)  \n# write out the plan \nwrite_csv(plan5, file = \"ABDplan.csv\") \n```\n\n# [**Split Plot**]{style=\"color: #2C6D26;\"}\n\nA split-plot design is an experimental approach where researchers focus on investigating two factors, characterized by:\n\n-   One factor that is relatively straightforward to change or manipulate.\n-   Another factor that is more challenging or complex to modify.\n\nThe split-plot design is a partially nested design closely resembling a repeated measures design in terms of analysis. In many scenarios, the split-plot design proves more practical than the fully randomized design in terms of efficiency.\n\nIn a split-plot design, the levels of factors are randomly assigned separately. One factor's levels are assigned to larger experimental units known as whole plots. Each whole plot is then subdivided into smaller units called split-plots, where the levels of another factor are randomly assigned.\n\nIn a basic split-plot design, the levels of one factor are assigned to main plots, which are arranged in a completely randomized design (CRD), randomized complete block design (RCBD), or a Latin square. Within each main plot, the levels of a second factor are assigned to subplots. In contrast to a completely randomized design where each split plot has an equal chance of receiving any treatment combination, the split-plot design allows for more practical and meaningful experimental setups in agricultural research.\n\nFor instance, consider an agronomist studying the impact of irrigation methods and fertilizer types on crop yield. Due to the difficulty of uniformly applying irrigation in small plots, she assigns one irrigation method (factor A) to each large plot (referred to as the whole plot). Subsequently, each large plot is subdivided into four smaller plots (split-plots), where four different types of fertilizer (factor B) are randomly assigned. Thus, the irrigation method (factor A), which applies to the entire large plot, is termed the whole plot factor. Meanwhile, the fertilizer type (factor B) is referred to as the split-plot factor.\n\n-   Whole plots (plots of land) are the experimental units for the whole-plot factor (irrigation level)\n-   Split plots (subplots of land) are the experimental units for the split-plot factor.\n-   In the split-plot world, whole plots act as blocks.\n-   Basically, we will be performing two different experiments in one:\n    -   Each experiment has its own randomization\n    -   Each experiment has its own idea of experimental unit\n\nThe layout for a split plot design is as shown below:\n\n![](images/split.png){width=\"50%\"}\n\n## [Example]{style=\"color: #002D62;\"}\n\n```{r}  ###############Split Plot Design - SPD #################}\ntrt1 <- c(\"A\", \"B\", \"C\", \"D\", \"E\") \ntrt2 <- c(\"N0\", \"N50\", \"N100\") \nplanSP <- design.split(trt1, trt2, r=3, serie=2, seed=14) \nplanSP <- planSP$book \nView(planSP)  \n# write out the plan\nwrite_csv(planSP, file = \"SPplan.csv\") \n```\n\n# [**Sparse Testing**]{style=\"color: #2C6D26;\"}\n\nSparse testing involves splitting the phenotyping of lines across various environments, serving as a robust strategy to achieve two specific objectives: (1) testing a greater number of lines across multiple diverse environments, and (2) expanding the number of testing environments while maintaining consistent selection intensity.\n\nSparse testing represents a promising approach to expand the number of lines and or locations. Test each genotype only in a subset of locations and predict missing information. The main goal is to test more genotypes or the same number of genotypes in more locations (or a combination of the two) at the same cost.\n\nSparse testing, where phenotyping of lines is distributed across environments, is an effective strategy to achieve two goals: (1) testing more lines across diverse environments, and (2) expanding the number of testing environments while keeping the selection intensity constant.\n\nSparse design can be generated using different design strategies such as random allocation and incomplete block approach. Using a random allocation is a straightforward and practical method to create a sparse allocation design, but it might not be the most efficient or informative approach. The allocation may not achieve balance or accurately represent the design space, potentially resulting in less precise estimates of treatment effects. The incomplete balance design (IBD) principle is employed to allocate treatments in a sparse manner, allowing for the efficient evaluation of numerous genotypes or treatments while ensuring a degree of balance is maintained.\n\nIf there are five genotypes to be allocated to six environments. Solving this problem will end up with not all genotypes present in all environments. The layout for a such sparse design is as shown below\n\n![](images/sparse.png)\n\n# [**P-rep Designs**]{style=\"color: #2C6D26;\"}\n\nThis is a class of design for early-stage variety trials. In Early Generation Variety Trial (EGVT), augmented designs (unreplicated trials) using control plots where seed is limited, and full replication is not feasible are popular. An alternative is to use partially replicated (p–rep) designs, where a proportion of the test genotypes are replicated.\n\nIn EGVT, augmented designs (unreplicated trials) using control plots where seed is limited, and full replication is not feasible are popular.\n\nEarly generation variety trials play a crucial role in plant and tree breeding programs. Often conducted with limited resources, these trials test numerous entries. Unreplicated trials with control plots are common, and trials are frequently repeated across multiple locations. Alternatively, p-rep designs replicate a portion of test entries at each location, eliminating the need for control plots. α-Designs are frequently employed for replicated variety trials, and we illustrate how they can be adapted to create efficient p-rep designs.\n\nThis method allows for the allocation of genotype/treatments in such way that not all of them are grown in every environment. This approach is often used when seed resources are limited. Can be potentiated by integrating this method with genomic relationship matrices (GRM).\n\n## [Example]{style=\"color: #002D62;\"}\n\n-   45 lines:\n\n    -   10 lines replicated twice (20%-25%)\n\n    -   35 unreplicated lines\n\n    -   5 blocks\n\n    -   3 checks in each of the 5 blocks\n\nNumber of plots: 10x2 + 35 + 3x5 = 70 plots\n\n![](images/P Rep.png){width=\"50%\"}\n","srcMarkdownNoYaml":"\n\n# [**Introduction**]{style=\"color: #234F1E;\"}\n\nExperimental design pertains to the way participants are assigned to various groups within an experiment. It is a thorough blueprint for gathering and utilizing data to uncover causal relationships. By meticulously strategizing, experimental design enables your data collection endeavors to effectively detect effects and assess hypotheses that address your research inquiries. Statistical design of experiments refers to the process of planning the experiment so that appropriate data will be collected and analyzed by statistical methods, resulting in valid and objective conclusions. Typically, the goal is to determine the impact that an independent variable has on a dependent variable. A well-designed experiment is important because the results and conclusions that can be drawn from the experiment depend to a largely on the way the data were collected. In experimental design it is important to **identify** the [**sources of variation.**]{style=\"color: #2C6D26;\"} The specific one chosen in an experimental design will be determined by the design's objective.\n\nA design is selected for an experiment based on the materials or treatments as well as the plots available for the experiment. Two main groups of designs are often used in breeding experiments. They are the complete block designs and the incomplete block designs.\n\nAll experiments have certain things in common, so designing an experiment usually includes the following steps. You must decide what question you want to have answered. This is the goal, or objective, of the experiment. The goal of the experiment will dictate what to include in the experiment to help you answer your question. The individual things that you wish to test in your experiment are called \"treatments\" and the physical areas to which the treatments are applied are called \"plots.\" Then you need to decide how the treatments should be physically arranged in the field. Technically, this is what is called the \"experimental design.\"\n\nThe objectives must be clearly stated as questions that need to be answered; hypotheses to be tested, and effects to be estimated. It is necessary to classify the objectives as major or minor since certain experimental designs give greater precision for some treatment comparisons than others.\n\n## [Principles of Experimental Design]{style=\"color: #002D62;\"}\n\nThere are three basic principles pf experimental design, these include:\n\n-   **Replication:** Two or more experiments using different experimental units, but with the same factor or independent variable settings. NB: *Due to changes in lurking variables and inherent variations in experimental units, the measured dependent variable may differ among replicate runs.* Replication entails duplicating experimental units or treatments to accommodate variability within the experiment. This practice enhances the accuracy of estimates and enables more robust statistical analysis. The number of replications is usually dependent on cost and time of experimentation. However, the smaller the size of difference expected to be detected, the higher the number of replicates required.\n\n    Replication is necessary because all test plots are not identical, and that leads to variation in the data you collect; you will not get the same results from two plots that received the same treatment.\n\n-   **Randomization:** Is the process of randomly assigning treatments to experimental units. As a result of the random process, every treatment factors has the same probability. By randomly assigning experimental units to treatments, randomization enhances the reliability of experimental outcomes by minimizing the influence of extraneous variables. Randomization is the allocation of treatments to units such that the probability that a particular treatment will be allocated to a particular unit is the same for all treatments. In plant breeding experiments, two commonly employed randomization methods include Latin Square Designs and Randomized Complete Block Designs (RCBD).\n\n-   **Blocking (error control):** Is the procedure for gathering similar experimental units into a relatively homogeneous group. Blocking consists of grouping experimental units into homogeneous blocks according to factors that could affect the response variable. This approach mitigates experimental error by addressing variability related to specific factors, such as soil type or field location. Often blocking is used to reduce or eliminate the variability transmitted from nuisance factors—that is, factors that may influence the experimental response but in which we are not directly interested. In field experiments where substantial variation within an experimental field can be expected, significant reduction in experimental error is usually achieved with the use of proper blocking.\n\nIn plant breeding, we do consider another vital principle of experimental design. This is the interaction effects.\n\n-   **Interaction Effects:** Interaction happens when the impact of one independent variable varies depending on the level of another independent variable. Put differently, the effect of one independent variable is not consistent across all levels of the other independent variable. In plant breeding, interaction effects refer to how the performance or expression of a particular trait (dependent variable) varies depending on the combination of different factors or conditions (independent variables). These factors can include genetic traits (genotypes), environmental conditions (such as temperature, soil type, or moisture), management practices (like fertilizer application or pest control), or their combinations.\n\n## [Applications of Experimental Design in Plant Breeding]{style=\"color: #002D62;\"}\n\n**Experimental design can be used in plant breeding such as:**\n\n-   **Genotype x Environment Interaction (G x E) studies:** Genotype by Environment (G × E) interaction is crucial in plant breeding, as the performance of a genotype can differ across various environmental conditions. DoE allows breeders to evaluate G × E interaction through multi-locational trials conducted under diverse agro-climatic conditions. This approach aids in identifying genotypes that exhibit broad and specific adaptation, enabling breeders to develop cultivars that are more stable and productive.\n\n-   **Optimization of Breeding:** Experimental design enables the refinement of breeding strategies by assessing the effectiveness of different selection methods, breeding techniques, and combinations of traits. Through systematic testing of various breeding approaches, breeders can pinpoint the most efficient strategies to achieve specific breeding goals, such as enhancing disease resistance, improving yield, or increasing nutritional quality.\n\n-   **Optimization of Field Management Practices:** Aside from genetic factors, crop performance is significantly impacted by environmental management practices such as irrigation, fertilization, and pest control. Experimental design enables breeders to enhance field management practices through controlled experiments that evaluate the effects of various agronomic techniques on crop yield, quality, and resource utilization efficiency.\n\n-   **Stress Tolerance Screening:** Given the escalating challenges presented by climate change and environmental pressures, there is an increasing demand to cultivate crop varieties that exhibit heightened stress tolerance. Experimental design supports stress tolerance screening by allowing breeders to methodically assess the performance of diverse germplasm under stressful conditions. By pinpointing genotypes with superior stress resilience and comprehending the underlying physiological mechanisms, breeders can cultivate resilient cultivars capable of thriving in challenging environments.\n\nThe application of experimental design in plant breeding can result in:\n\n-   Improved accuracy of decision making\n-   Reduced variability\n-   Reduced overall cost\n-   Compare resistant to drought\n\n## [Guidelines for Designing an Experiment]{style=\"color: #002D62;\"}\n\nThe following are the guidelines in designing of experiment\n\n-   Define Objectives - Hypothesis\n-   Identify Experimental Units\n-   Define Measurable Response – Dependent Variable\n-   List Factor/Independent & Lurking Variables\n-   Run Pilot Tests\n-   Make a Flow Diagram of Experimental Procedure\n-   Choose Experimental Design\n-   Determine the number of Replicates Required\n-   Randomize the Experimental Condition to Experimental Units\n-   Describe a Method for Data Analysis\n-   Timetable and Budget for Resources Needed to Complete the Experiments\n\n![](images/Steps in DoE.png){width=\"40%\"}\n\n## [Definition of Terms]{style=\"color: #002D62;\"}\n\n-   **Experiment (Run):** A procedure in which the researcher modifies ***at least*** one of the variables under investigation and then examines the results.\n\n-   **Experimental Unit (EU):** Item that is being studied and on which something is modified. **Experimental unit** is the smallest thing that is measured. It may be a plot, an animal, a tree, group of trees, a plant, a person, etc., receiving a treatment.\n\n-   **Sub-Sample/Sub-Unit/Observational Unit:** It is formed when the experimental unit is split after the action has been performed on it. NB: Sub-samples or *sub-units of the same experimental unit are usually correlated and should be averaged before analysis.*\n\n-   **Treatment Factor (Independent Variable):** Variable under investigation/control that is kept at near or perfect value, or level during experiment.\n\n-   **Background/Lurking Variable:** Variable the experimenter is unaware of or unable to control that could affect the outcome of the experiment.\n\n-   **Response (Dependent Variable):** The feature of the experimental unit that is measured after each experiment or runs. NB: *The size of the responses is influenced by the settings of the independent variables or factors, as well as any hidden variables.*\n\n-   **Experimental Error:** The variation between the observed response for a specific experiment and the long run average of all tests conducted with the same independent variables or factors. NB: *Because of background or lurking variables, experimental errors are not equal to zero.*\n\n-   **Effect:** The change in the response variable that is caused by change in the treatment factor or independent variable. NB: *It's termed **calculated effect** when it's computed after an experiment from observed data, while it's called **effect size** when it's determined before an experiment.*\n\n-   **Fixed Effect:** We have a fixed effect if the treatments are well defined and easily replicable and are expected to yield the same impact on average in each replicate. The model is called a ***fixed effect model.***\n\n-   **Random Effect:** We have a random effect if the treatments cannot be considered to come from a predefined or known set, they are supposed to be a **random sampling** from a larger population of possible treatments. The model is called a ***random effects model.***\n\n-   **Block Design:** In many experiments, the available experimental units are grouped into blocks with similar characteristics to mitigate the impact of potential sources of variability. This approach is known as block design.\n\n-   **Complete Block Design:** The number of experimental units in a block is called the block size. If size of block is the same as the number of treatments and each treatment in each block is randomly allocated, then it is a full replication, and the design is called a complete block design.\n\nThe choice of experimental design to study the source of variability depends on the number of sources under study. The appropriate experimental design to study cause and effect relationship depends on:\n\n-   Type & number of treatment factors\n-   Degree of homogeneity of experimental units\n-   Ease of randomization\n-   Ability to block experimental units into homogeneous groups\n\nThe final experimental design chosen will determine the following\n\n-   How data will be collected\n-   Model to be fit to analyze the data\n-   Data interpretation\n-   Conclusions drawn from experiment\n\n**Some standard designs that are frequently used are:**\n\n1.  Completely randomized design (CRD)\n2.  Randomized complete block design (RCBD)\n3.  Incomplete block design (IBD)\n4.  Lattice and Alpha design\n5.  Latin Square Design\n6.  Augmented design\n7.  Split plot design\n8.  Sparse Testing\n9.  P-rep Design\n\n# [**Standard Designs**]{style=\"color: #2C6D26;\"}\n\nHere, we shall identify some designs commonly used in field experiments. We shall outline the design features and the most auspicious situation or environment; we shall also specify the relevant statistical model because specification of the model is always an element of experiment design; there is always the need to construct the model and sketch the analysis of variance as part of the design of the experiment.\n\n# [**Completely Randomized Design**]{style=\"color: #2C6D26;\"}\n\nThis is the simplest of all experimental designs. A completely randomized design (CRD) refers to a design where the experimenter randomly assigns experimental units to treatments, so that each experimental unit has the same chance of receiving any one treatment. This design is employed in experiments that do not involve blocking factors with homogeneous experimental units.\n\nThe layout of a CRD is as shown below.\n\n![](images/crd.png){width=\"40%\"}\n\n## [Example]{style=\"color: #002D62;\"}\n\nThe basic R syntax for CRD is\n\n```{r}\n#design.crd(trt, r, serie = x, seed = yyy) #<<  \n```\n\n**Arguments**\n\n-   `trt` : Treatments\n-   `r` : Replications\n-   `serie` : number plot, 1: 11,12; 2: 101,102; 3: 1001,1002\n-   `seed` : seed\n\n**Lets see an example**\n\n```{r }\n\n#|message = FALSE\n#|eval=TRUE\n#Load libraries \nlibrary(tidyverse) \nlibrary(agricolae)  \n################Completely Randomized Design - CRD####################  \n#Planning CRD \ntrt <- c(\"G1\",\"G2\",\"G3\",\"G4\",\"G5\") \nplan <- design.crd(trt,3, seed=7638) \nplan <- plan$book \nView(plan)  \n# write out the plan \nwrite_csv(plan, file = \"CRDplan.csv\") \n```\n\n# [**Randomized Complete Block Design**]{style=\"color: #2C6D26;\"}\n\nRandomized complete block design (RCBD) is the most used of the experiment designs. The design is used when plots can be grouped into blocks such that units in each block are homogenous and the number of units in each block is the same as the number of treatments in the experiment. The design is especially suited for field experiments where the number of treatments is not large and there exists a conspicuous factor based on which homogeneous sets of experimental units can be identified. The primary distinguishing feature of the RCBD is the presence of blocks of equal size, each of which contains all the treatments. The blocks of the experimental units should be uniform as possible so that the observed differences between treatments will be largely due to `true` differences between treatments. A completely randomized block design will fully replicate all treatments in grouped homogeneous blocks. In field research, location is often a blocking factor. RCBD helps reduce variability caused by difference between blocks, allowing for more precise estimation of treatment effects.\n\nThe layout for RCBD is as shown below\n\n![](images/rcbd.png){width=\"50%\"}\n\n## [Example]{style=\"color: #002D62;\"}\n\nThe basic R syntax for RCBD is\n\n```{r}\n#design.rcbd(trt, r, serie = x, seed = yyy) #<<\n```\n\n**Arguments**\n\n-   `trt` : Treatments\n-   `r` : Replications or blocks\n-   `serie` : number plot, 1: 11,12; 2: 101,102; 3: 1001,1002\n-   `seed` : seed\n\n**Lets look at an example**\n\n```{r}\n##############Randomized Complete Block Design - RCBD######################  #Planning RCBD \ntrt1 <- c(\"A\",\"B\",\"C\",\"D\",\"E\") \nplan2 <- design.rcbd(trt1, 4, seed = 161)\nplan2 <- plan2$book \nView(plan2)   \n# write out the plan \nwrite_csv(plan2, file = \"RCBDplan.csv\")\n```\n\n# [**Incomplete Block Design**]{style=\"color: #2C6D26;\"}\n\nIn earlier designs, we assumed that each block contains all treatments. When the number of treatments is large, it may not be possible to get enough homogenous plots to contain all the treatments. Block designs which have blocks of size less than the number of treatments are called Incomplete Block Designs.\n\nIncomplete block designs (IBD) prove beneficial when time and/or space constraints prevent monitoring all treatments simultaneously. They enable experiments to be conducted in stages, facilitating more manageable implementation. Moreover,*incomplete block designs can effectively minimize experimental error, offering a higher level of precision in treatment comparisons compared to complete block designs*.\n\nThis occurs when the number of treatments is so large that a full replication in each block makes it too heterogeneous with respect to the characteristic under study, then smaller but homogeneous blocks can be used. In such a case, the blocks do not contain a full replicate of the treatments. Experimental designs with blocks containing an incomplete replication of the treatments is called incomplete block design.\n\nThe incomplete block design can be considered under two categories, a balance incomplete block design and an unbalanced incomplete block design. A balanced incomplete block design ensures that all treatments are compared with equal precision, as each pair of treatments occurs together an equal number of times. An unbalanced incomplete block design is suitable for experiments conducted in stages. It allows for a smaller-scale experiment, albeit with reduced precision, as not every treatment pair occurs equally. Increasing the number of repetitions in an unbalanced incomplete block design enhances precision. Despite replication, an unbalanced design typically results in a smaller experiment compared to a balanced design.\n\n**The layout for balanced and unbalanced incomplete block design is as shown below:**\n\nLet’s just consider **square lattices**, where the number of genotypes is a perfect square, for example 9, 16, 25, 144 or 900. In a square lattice, the block size is fixed as the square root of the number of genotypes. Example: with 225 genotypes the blocks would be of 15 plots each. Suppose that 9 genotypes are to be evaluated, each to be replicated twice. This permits us to use 2 replicates in a 3x3-lattice arrangement, prior to randomization. Once you lunch the **library(agricolae)**, the function **design.lattice** generate the lattice design and **design.alpha** to generate the alpha design.\n\n![](images/Lattice.png)\n\n**Lets see an example**\n\nAlpha and Lattice are two examples of incomplete block design. We will look at these two designs.\n\n## [Example of Square Lattice Design (SLD)]{style=\"color: #002D62;\"}\n\nThe basic R syntax for SLD is\n\n```{r}\n#design.lattice(trt2, r=x, seed = yyy)\n```\n\n**Arguments**\n\n-   `trt` : treatments\n-   `r` : r = 2(simple) or r = 3(triple) lattice\n-   `serie` : number plot, 1: 11,12; 2: 101,102; 3: 1001,1002\n-   `seed` : seed\n\n```{r}\n#Planning Row Column Design - SLD \ntrt2 <- 1:81 \nplan3 <- design.lattice(trt2, r=2, seed = 123) \nplan3 <- plan3$book \nView(plan3)   # write out the plan write_csv(plan3, file = \"SLDplan.csv\")\n```\n\n## [Example of Alpha design]{style=\"color: #002D62;\"}\n\nThe basic R syntax for Alpha Design is\n\n```{r}\n#design.alpha(trt,k,r,serie=2, seed=seed)\n```\n\n**Arguments**\n\n-   `trt` : treatments\n-   `k` : size block\n-   `r` : Replications\n-   `serie` : number plot, 1: 11,12; 2: 101,102; 3: 1001,1002\n-   `seed` : seed\n\n```{r}\n#Planning an Alpha design - AD \n#30 test materials \ntrt <- 1:30 #trt <- letters[1:12] \nt <- length(trt) \n# size block k \nk <- 3 \n# Blocks s \ns <- t/k \n# replications r \nr <- 2   \nplan4 <- design.alpha(trt,k,r,serie=2, seed=1234)  \nplan4 <- plan4$book  \nView(plan4)  \n# write out the plan\nwrite_csv(plan4, file = \"ADplan.csv\")\n```\n\n# [**Latin Square Design**]{style=\"color: #2C6D26;\"}\n\nThe Latin square design (LSD) is a type of complete block design utilized in experiments where two blocking criteria are relevant. The Latin square design is used where the researcher desires to control the variation in an experiment that is related to rows and columns in the field. This layout is particularly employed in field trials where environmental factors like irrigation and soil type vary across rows and columns. Each treatment is randomly assigned exactly once per row and per column, treating each row and column as complete blocks. It is a n x n grid filled by n distinct numbers each appearing exactly once in each row and column.\n\nThis design is used to control two sources of variation (other than treatments) generally referred to as “rows” and “columns”. IT is an arrangement of symbols in a square array such that every symbol occurs exactly one in each row and once in each column. It is a form of block where the two blocks are perpendicular to each other. In Latin square design, the number of plots (n) is the square of the number of treatments (t), i.e. n=$t^2$ – Number of times each treatment occurs is also t.\n\nThis design is used to simultaneously control (or eliminate) two sources of nuisance variability. Often, the nuisance factors controlled in a Latin-Square are known as row and column factor for obvious reasons. The levels of the treatment factor are represented by Latin letters and arranged orthogonally in the cells of the square.\n\nThe layout for Latin square design is as shown below\n\n![](images/latinsquare.png)\n\n## [Example]{style=\"color: #002D62;\"}\n\nThe basic R syntax for LSD is\n\n```{r}\n#LSD.test(y, trt, DFerror, MSerror, alpha, group)\n```\n\n**Arguments**\n\n-   `trt`: treatments\n-   `serie` : number plot, 1: 11,12; 2: 101,102; 3: 1001,1002\n-   `seed` : seed\n\n# [**Augmented Design**]{style=\"color: #2C6D26;\"}\n\nThe augmented experimental designs are used for two types of treatments: the control treatments (common) and the increased treatments. The common treatments are applied in complete randomized blocks, and the increased treatments, at random. Each treatment should be applied to any block once. This design proves valuable when handling a substantial number of treatments where replication is impractical or infeasible. Typically, studies employing this approach aim to rank or select genotypes as their primary objective.\n\nSuppose a researcher intends to evaluate 10 different types of fertilizers. Key considerations such as determining optimal plot locations, deciding on the number of replications for each fertilizer type, and assigning specific fertilizers to respective plots all hold significant importance in planning the experiment.\n\nAugmented designs are appropriate for early generation stages when hundreds or even thousands of genotypes are being evaluated in the same experiment, using a limited amount of sowing material, perhaps enough for one replicate only. Where there is little seed for some of the genotypes, there may be just a single replicate of some of these genotypes.\n\nAn augmented design is any standard design in control treatments augmented with additional (new or test) treatments in complete or incomplete blocks in one-way heterogeneity setting. A survey of the literature reveals that generally these experiments are conducted using an augmented randomized complete block design. In an **augmented RCB design**, the basic design plan is to divide the experimental area into several blocks. A few check varieties are replicated in each block, while test genotypes are assigned to the remaining plots in each block. The test genotypes are not replicated but are assigned at random throughout the blocks\n\nExample: For 45 unreplicated lines, with 3 checks and 9 blocks. The number of plots will be: (45+3\\*9) = 72 plots\n\n**With augmented design one can estimate the following:**\n\na)  Differences between checks and new treatments,\nb)  Differences among new treatments,\nc)  Differences among check treatments, and\nd)  Differences among new and check treatments combined.\n\nThe layout for augmented design is as shown below\n\n![](images/augmented1.png){width=\"40%\"}\n\nSimplest case is the Augmented Randomized Complete Block Design (ARCB), with\n\n-   Checks occurring once in every block\n\n-   New or test treatment occurs once in the treatment\n\n    Plant breeding used cases includes when there is:\n\n    -   Limited seeds – test treatments\n\n    -   Land & other resources are limited\n\n    -   It’s difficult to keep homogeneous blocks in many genotypes.\n\n    -   Test promising genotypes in as many environments as possible\n\n-   Few drawbacks\n\n    -   Significant resources are spent on producing & processing of control plots\n\n    -   Experimental error has a limited number of degrees of freedom, which limits the power to detect changes across treatments.\n\n    -   Unreplicated experiments are inherently imprecise, regardless of the design\n\nThe function **design.dau** generates the augmented design.\n\n## [Example]{style=\"color: #002D62;\"}\n\nThe basic R syntax to achieve this is:\n\n```{r}\n# design.dau(trt1, trt2, r, serie = 2, seed = 0, kinds = \"Super-Duper\", name=\"trt\",randomization=TRUE)\n```\n\n**Arguments**\n\n-   `trt1`: check\n-   `trt2`: treatment\n-   `r`: Replications or blocks\n-   `serie`: number plot, 1: 11,12; 2: 101,102; 3: 1001,1002\n-   `seed`: seed\n\n**Lets look at an example**\n\n```{r} #################Augmented Block Design - ABD#######################}\n#Planning ABD \ncheck <- c(\"A\",\"B\",\"C\",\"D\")  #Checks\nnew <- letters[20:26]   #New treatments\n# 5 Replication or blocks \nplan5 <-design.dau(check, new, r=5, serie=2, seed = 1611)\nplan5 <- plan5$book\nView(plan5)  \n# write out the plan \nwrite_csv(plan5, file = \"ABDplan.csv\") \n```\n\n# [**Split Plot**]{style=\"color: #2C6D26;\"}\n\nA split-plot design is an experimental approach where researchers focus on investigating two factors, characterized by:\n\n-   One factor that is relatively straightforward to change or manipulate.\n-   Another factor that is more challenging or complex to modify.\n\nThe split-plot design is a partially nested design closely resembling a repeated measures design in terms of analysis. In many scenarios, the split-plot design proves more practical than the fully randomized design in terms of efficiency.\n\nIn a split-plot design, the levels of factors are randomly assigned separately. One factor's levels are assigned to larger experimental units known as whole plots. Each whole plot is then subdivided into smaller units called split-plots, where the levels of another factor are randomly assigned.\n\nIn a basic split-plot design, the levels of one factor are assigned to main plots, which are arranged in a completely randomized design (CRD), randomized complete block design (RCBD), or a Latin square. Within each main plot, the levels of a second factor are assigned to subplots. In contrast to a completely randomized design where each split plot has an equal chance of receiving any treatment combination, the split-plot design allows for more practical and meaningful experimental setups in agricultural research.\n\nFor instance, consider an agronomist studying the impact of irrigation methods and fertilizer types on crop yield. Due to the difficulty of uniformly applying irrigation in small plots, she assigns one irrigation method (factor A) to each large plot (referred to as the whole plot). Subsequently, each large plot is subdivided into four smaller plots (split-plots), where four different types of fertilizer (factor B) are randomly assigned. Thus, the irrigation method (factor A), which applies to the entire large plot, is termed the whole plot factor. Meanwhile, the fertilizer type (factor B) is referred to as the split-plot factor.\n\n-   Whole plots (plots of land) are the experimental units for the whole-plot factor (irrigation level)\n-   Split plots (subplots of land) are the experimental units for the split-plot factor.\n-   In the split-plot world, whole plots act as blocks.\n-   Basically, we will be performing two different experiments in one:\n    -   Each experiment has its own randomization\n    -   Each experiment has its own idea of experimental unit\n\nThe layout for a split plot design is as shown below:\n\n![](images/split.png){width=\"50%\"}\n\n## [Example]{style=\"color: #002D62;\"}\n\n```{r}  ###############Split Plot Design - SPD #################}\ntrt1 <- c(\"A\", \"B\", \"C\", \"D\", \"E\") \ntrt2 <- c(\"N0\", \"N50\", \"N100\") \nplanSP <- design.split(trt1, trt2, r=3, serie=2, seed=14) \nplanSP <- planSP$book \nView(planSP)  \n# write out the plan\nwrite_csv(planSP, file = \"SPplan.csv\") \n```\n\n# [**Sparse Testing**]{style=\"color: #2C6D26;\"}\n\nSparse testing involves splitting the phenotyping of lines across various environments, serving as a robust strategy to achieve two specific objectives: (1) testing a greater number of lines across multiple diverse environments, and (2) expanding the number of testing environments while maintaining consistent selection intensity.\n\nSparse testing represents a promising approach to expand the number of lines and or locations. Test each genotype only in a subset of locations and predict missing information. The main goal is to test more genotypes or the same number of genotypes in more locations (or a combination of the two) at the same cost.\n\nSparse testing, where phenotyping of lines is distributed across environments, is an effective strategy to achieve two goals: (1) testing more lines across diverse environments, and (2) expanding the number of testing environments while keeping the selection intensity constant.\n\nSparse design can be generated using different design strategies such as random allocation and incomplete block approach. Using a random allocation is a straightforward and practical method to create a sparse allocation design, but it might not be the most efficient or informative approach. The allocation may not achieve balance or accurately represent the design space, potentially resulting in less precise estimates of treatment effects. The incomplete balance design (IBD) principle is employed to allocate treatments in a sparse manner, allowing for the efficient evaluation of numerous genotypes or treatments while ensuring a degree of balance is maintained.\n\nIf there are five genotypes to be allocated to six environments. Solving this problem will end up with not all genotypes present in all environments. The layout for a such sparse design is as shown below\n\n![](images/sparse.png)\n\n# [**P-rep Designs**]{style=\"color: #2C6D26;\"}\n\nThis is a class of design for early-stage variety trials. In Early Generation Variety Trial (EGVT), augmented designs (unreplicated trials) using control plots where seed is limited, and full replication is not feasible are popular. An alternative is to use partially replicated (p–rep) designs, where a proportion of the test genotypes are replicated.\n\nIn EGVT, augmented designs (unreplicated trials) using control plots where seed is limited, and full replication is not feasible are popular.\n\nEarly generation variety trials play a crucial role in plant and tree breeding programs. Often conducted with limited resources, these trials test numerous entries. Unreplicated trials with control plots are common, and trials are frequently repeated across multiple locations. Alternatively, p-rep designs replicate a portion of test entries at each location, eliminating the need for control plots. α-Designs are frequently employed for replicated variety trials, and we illustrate how they can be adapted to create efficient p-rep designs.\n\nThis method allows for the allocation of genotype/treatments in such way that not all of them are grown in every environment. This approach is often used when seed resources are limited. Can be potentiated by integrating this method with genomic relationship matrices (GRM).\n\n## [Example]{style=\"color: #002D62;\"}\n\n-   45 lines:\n\n    -   10 lines replicated twice (20%-25%)\n\n    -   35 unreplicated lines\n\n    -   5 blocks\n\n    -   3 checks in each of the 5 blocks\n\nNumber of plots: 10x2 + 35 + 3x5 = 70 plots\n\n![](images/P Rep.png){width=\"50%\"}\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","editor":"visual","theme":"cosmo","title":"<p style=\"color:black,text-align:center\">Design of Experiment</p>","author":[{"name":"<font color=#ff6600><b>Biometrics Unit</b></font>"}],"affiliation":"<font color=#ff6600><b>International Institute of Tropical Agriculture (IITA)</b></font>"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}